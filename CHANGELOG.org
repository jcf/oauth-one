#+TITLE: Changes
#+STARTUP: content

* 0.5.0
Fix escaping of characters by sticking more closely to [[https://www.ietf.org/rfc/rfc3986.txt][RFC 3986]].

This release also removes the dependency on crypto-random, as we now generate
nonces more directly.

* 0.4.0
Avoid non-word characters in nonces.

#+BEGIN_QUOTE
The oauth_nonce parameter is a unique token your application should
generate for each unique request. Twitter will use this value to
determine whether a request has been submitted multiple times. The
value for this request was generated by base64 encoding 32 bytes of
random data, and stripping out all non-word characters, but any
approach which produces a relatively random alphanumeric string should
be OK here.
#+END_QUOTE

https://twittercommunity.com/t/how-to-generate-an-oauth-nonce/1307

* 0.3.0
** Better support for query parameters
Previously, only form parameters were supported as that's all I was using. Now
that query parameters are required, you can pass params on the end of the URL,
or in a separate map of query params.

#+begin_src clojure
  (one/sign-request
   consumer
   {:url "https://example.com/?foo=bar"
    :query-params {"baz" "qux"}})
#+end_src

Both the ~foo~ parameter and ~baz~ parameters above will be merged into a single
map of signed parameters as per the OAuth 1.0 spec.

* 0.2.0
** Add ~parse-auth-header~ utility function
Add ~parse-auth-header~ function that was previously only used in the test
suite. This function is really handy in other test suites too!

#+begin_src clojure
  (require '[oauth.one :as one])

  (one/parse-auth-header "OAuth oauth_consumer_key=\"key\"")
  ;; => {"oauth_consumer_key" "key"}
#+end_src

The function works both with and without the ~OAuth~ prefix.

** Improved signed request
There are some fairly significant *breaking* changes in this release for anyone
who made direct use of ~signed-request~ and its associated schema.

~signed-request~ has been renamed to ~sign-request~ and has slightly modified
behaviour. Firstly, you can now omit OAuth headers when calling ~signed-request~
if you're trying to send an authenticated request.

#+begin_src clojure
  (require '[oauth.one :as one])

  (def consumer
    (one/make-consumer {:key "etc"}))

  (one/sign-request
   consumer
   {:request-method :get
    :url "https://api.twitter.com/account/verify_credentials"})
#+end_src

You can create a header map directly via the new, public ~make-oauth-headers~
function if you want to associate some state in before creating a signed request
via ~sign-request~.

#+begin_src clojure
  (one/sign-request
   consumer
   {:request-method :get
    :oauth-headers
    (assoc
     (one/make-oauth-headers consumer)
     "oauth_extension" "etc")
    :url "https://api.twitter.com/account/verify_credentials"})
#+end_src

You may notice, ~:oauth-headers~ used to be called ~:oauth-params~. The tests
have been updated accordingly, and are a good place to look for up-to-date
examples of how to use the library.

In addition, the version of Schema being used has been upgraded to 1.1.0.
